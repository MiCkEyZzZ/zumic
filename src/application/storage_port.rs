//! Интерфейс (порт) для работы с хранилищем "ключ-значение".
//!
//! Этот трейт задаёт операции, которые поддерживаются бэкендами хранилищ "ключ-значение":
//! - `set` — установить значение для ключа, перезаписав существующее.
//! - `get` — получить значение по ключу, или `None`, если ключ не существует.
//! - `del` — удалить ключ из хранилища, возвращает `1`, если ключ был удалён, или `0`, если его не существовало.
//! - `mset` — установить несколько пар "ключ-значение" за одну операцию.
//! - `mget` — получить значения для нескольких ключей, возвращает `None`, если ключ не существует.
//! - `rename` — переименовать ключ, если исходный ключ существует.
//! - `renamenx` — переименовать ключ только если целевой ключ не существует.
//! - `flushdb` — очистить базу данных, удалив все ключи.

use crate::{
    StoreResult, {Sds, Value},
};

/// Трейт `StoragePort` задаёт интерфейс для бэкендов хранилищ "ключ-значение".
/// Все методы могут завершиться с ошибкой и возвращают результат типа `StoreResult`.
pub trait StoragePort {
    /// Устанавливает значение для заданного ключа.
    /// При этом перезаписываются все существующие значения.
    fn set(&mut self, key: Sds, value: Value) -> StoreResult<()>;

    /// Возвращает значение для заданного ключа, или `None`, если ключ отсутствует.
    fn get(&mut self, key: Sds) -> StoreResult<Option<Value>>;

    /// Удаляет ключ из хранилища.
    /// Возвращает `1`, если ключ был удалён, или `0`, если его не существовало.
    fn del(&self, key: Sds) -> StoreResult<i64>;

    /// Устанавливает несколько пар "ключ-значение" в рамках единой операции.
    fn mset(&mut self, entries: Vec<(Sds, Value)>) -> StoreResult<()>;

    /// Возвращает значения для списка ключей.
    /// Если значение для какого-либо ключа отсутствует, возвращается `None`.
    fn mget(&self, keys: &[Sds]) -> StoreResult<Vec<Option<Value>>>;

    /// Переименовывает ключ в новое имя.
    /// Если исходный ключ отсутствует, возвращается ошибка.
    fn rename(&mut self, from: Sds, to: Sds) -> StoreResult<()>;

    /// Переименовывает ключ в новое имя только в том случае, если новый ключ ещё не существует.
    /// Возвращает `true`, если переименование произошло, и `false`, если целевой ключ уже существует.
    fn renamenx(&mut self, from: Sds, to: Sds) -> StoreResult<bool>;

    /// Очищает базу данных, удаляя все ключи.
    fn flushdb(&mut self) -> StoreResult<()>;
}
