name: "Semantic Pull Request"

on:
  # Используем pull_request_target — workflow запускается в контексте репозитория-приёмника,
  # что безопаснее для выполнения проверок (не запускает код из PR).
  pull_request_target:
    types:
      - opened
      - reopened
      - edited

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout base branch (trusted)
        uses: actions/checkout@v4
        with:
          # Чекаутим базовую ветку, чтобы не исполнять код из PR
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-depth: 1

      - name: Validate PR title follows semantic format
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const prNumber = pr?.number;
            const title = (pr?.title || "").trim();
            const isDraft = !!pr?.draft;

            // Если PR в статусе draft — не фейлим проверки
            if (isDraft) {
              core.info("PR is a draft — skipping semantic check.");
              return;
            }

            if (!prNumber) {
              throw new Error("No pull request information available in context.");
            }

            // Разрешённые типы. Подправь список по вкусу.
            const re = /^(feat|fix|docs|chore|perf|refactor|test|ci|build|style|release|hotfix)(\([^)]+\))?:\s.+/i;

            if (!title) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: [
                  ":warning: PR title is empty — please provide a semantic title.",
                  "",
                  "**Expected format:** `type(scope?): short description`",
                  "Example: `feat(bitmap): add avx2 fallback`"
                ].join("\n")
              });
              throw new Error("PR title is empty");
            }

            if (!re.test(title)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: [
                  ":x: The PR title does not follow the semantic format.",
                  "",
                  "**Expected:** `type(scope?): short description`",
                  "Allowed `type` examples: `feat`, `fix`, `docs`, `chore`, `perf`, `refactor`, `test`, `ci`, `build`, `style`, `release`, `hotfix`",
                  "",
                  "**Example:** `feat(bitmap): add avx2 fallback`",
                  "",
                  "Please update the PR title and push again."
                ].join("\n")
              });

              // заваливаем шаг — CI будет помечен как failed
              throw new Error("PR title does not match semantic format");
            }

            core.info(`PR title OK: "${title}"`);
